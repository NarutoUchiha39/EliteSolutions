"""
In this question the Dijkstra's algorithm is used. For reference see Dijkstra's Algorithm sum available on our website 
"""

from collections import defaultdict
from heapq import * 
class Solution:
    def networkDelayTime(self, times: list[list[int]], n: int, k: int) -> int:
        graph = defaultdict(list)
        for i in times:
                graph[i[0]].append([i[1],i[2]])

        heap = [[0,k]]
        visited = set()
        dist = [float("inf") for i in range(n+1)]
        dist[k] = 0
    
        while(heap):
            node = heappop(heap)
            src = node[1]
            cost = node[0]
            visited.add(src)
            for i in graph[src]:
                if i[0] not in visited:
                    if(dist[src]+i[1] &lt dist[i[0]]):
                    
                        dist[i[0]] = dist[src]+i[1]
                        heappush(heap,[dist[src]+i[1],i[0]])
        return max(dist[1:]) if len(visited)==n else -1



