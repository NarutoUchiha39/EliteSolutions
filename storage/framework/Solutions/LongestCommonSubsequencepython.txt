"""
In this question we are required to find the longest subsequence that is common to both the strings. For that we have two running indices one that goes through the first string and the other that goes through the second string. If we find any character that is common to  both the strings, we increment both the pointers by one. But if encounter a substring that is different then any of both the mismatched characters can be matched again in the future. As a result, we make two recursion calls. One that decrements the first pointer by 1 and the second that decrements the second pointer by 1. In this way we are comparing each character of one string to all possible subsequence of the second string. Thus the time complexity becomes O( (2**n) * (2**m) ). Now in oder to reduce the time complexity we use memoization as we see that there many overapping subproblems. We store the results of recursion in a 2-D DP array that represents the longest common subsequence between 0th character of one string to ith of the same string and 0th character of 1 string to jth character of the other string. his boils down our time complexity to O(m*n). Further optimization can be done by using tabulation  
"""
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        length = [0]
        dp = [[-1]*len(text1) for i in range(len(text2))]
        print(dp)
        def reccur(index1,index2):

            if(index1<0 or index2<0):
                return 0
            if(dp[index2][index1]!=-1):
                return dp[index2][index1]

            if(text1[index1] == text2[index2]):
                dp[index2][index1] = 1+reccur(index1-1,index2-1)
                return(dp[index2][index1])

            dp[index2][index1] = max(reccur(index1-1,index2),reccur(index1,index2-1))
            return dp[index2][index1]

        return reccur(len(text1)-1,len(text2)-1)