/*
Dijkstra's Algorithm :

Single Source shortest path algorithm
works for directed and non directed graphs. Gives shortest distance between Source node and a target node or between source node and all other nodes. Can be implemented using heaps and without heaps. Since we are using greedy, after selecing one node we cannot touch it again !!

Time Complexity : O ( V2 ) without heaps.
By using heaps the time complexity reduces to E * ( log V ) 
1) We have V vertices then for each vertex we have to do he following: ( extract min vertex from heap  for each extracted vertex traverse its edges and add them to the min heap )


2) Next, we have to find all the vertices that have not been visited yet and push it into the min heap E * log( heap size ). Here E can be V as each Vertice can be connected to every other vertice in the graph. Therefore the total time complexity now is V * ( log( heap size )  E * log( heap size ) ) = V * ( (E1) log( heap size ) ) = V * V * log( heap size )

3) Now for the heap size, for he first element the number of comparisons is suppose V ( worst case ). For the next vertex the total number of comparisons will be V-1 ( 1 vertex got selected above ). Therefore the total number of elements in heap : V  V-1  . . . . . sum of natural numbers roughly V^2. 

4) Now the total time complexity thus becomes V2 * log( V ). V2 can also be written as E ( For connected graphs ) So Final time complexity: O( E* log(V) ) 
*/

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int[][]graph = new int[V][];
        for (int i = 0; i < V; i++) {
            graph [i] = new int[V];
            Arrays.fill(graph[i],Integer.MAX_VALUE);
        }
        for (int i = 0;i<adj.size();i++){
            for (int j = 0; j < adj.get(i).size(); j++) {
                graph[i][adj.get(i).get(j).get(0)] = adj.get(i).get(j).get(1);}
        }

        int [] dist = new int[V];
        Set<Integer> visited = new HashSet<>();
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[S] = 0;
        PriorityQueue<Integer[]>heap = new PriorityQueue<>(new Comparator<Integer[]>() {
            @Override
            public int compare(Integer[] o1, Integer[] o2) {
                return o1[0].compareTo(o2[0]);
            }
        });
        heap.offer(new Integer[]{0,S});

        while (!heap.isEmpty())
        {
            Integer[] element = heap.poll();
            Integer cost = element[0];
            Integer point = element[1];
            visited.add(point);
            for (int i = 0; i < V; i++) {
                if(graph[point][i]!=Integer.MAX_VALUE && !visited.contains(i)){
                    if(cost + graph[point][i]<dist[i]){
                        dist[i] = cost + graph[point][i];
                        heap.offer(new Integer[]{cost + graph[point][i],i});
                    }
                }
            }
        }
        return dist;
    }
}